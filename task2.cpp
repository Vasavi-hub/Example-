/*Task 2: Simulate an Instrument Cluster Data Display
Objective: Create a simplified data display system to simulate speed, fuel level, and engine temperature.
Requirements:
Implement a class-based design:
Create a VehicleData class to store parameters like speed, fuel level, and engine temperature.
Create a Display class to show these parameters on the console.
Simulate real-time updates:
Use a random number generator to update speed, fuel level, and temperature every second.
Display the updated data in a formatted manner (e.g., speed: 80 km/h, fuel: 50%, temperature: 90°C).
Add constraints:
Display warnings when parameters exceed thresholds (e.g., temperature > 100°C or fuel < 10%).*/

#include<iostream>
#include<iomanip>
#include<thread>
#include<chrono>
#include<random>
#include<atomic>
#include<vector>
using namespace std;

class vehicledata{
    public:
    atomic<int> speed;
    atomic<int> fuellevel;
    atomic<int> enginetemperature;

    vehicledata():speed(0),fuellevel(100),enginetemperature(90) {}



void updatedata(){
    static random_device rd;
    static mt19937 gen(rd());
    static uniform_int_distribution<> speeddist(0,80);
    static uniform_int_distribution<> fueldist(0,100);
    static uniform_int_distribution<> tempdist(8,120);
    speed=speeddist(gen);
    fuellevel=fueldist(gen);
    enginetemperature=tempdist(gen);
}
};
class Display{
    public:

    void showdata(const vehicledata& data) const{
        cout<<"speed:"<< data.speed<<endl;

        if(data.fuellevel<20){
            cout<<"fuel:"<<data.fuellevel<<"warning:lowfuellevel";
        }
        else{

            cout<<"fuel:"<<data.fuellevel<< endl;
        }
        if(data.enginetemperature>100){
            cout<<"Temperature:"<< data.enginetemperature<< "warning:High temperature";

        }
        else{
            cout<<"temperature:"<<data.enginetemperature<<endl;
        }
    }
   
};
void updateAndDisplay(vehicledata& data,Display& display){
        while(true){
            data.updatedata();
            display.showdata(data);
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
    }  



int main()
{
    vehicledata dataa;
    Display play;

    std::thread playthread(updateAndDisplay,std::ref(dataa),std::ref(play));

    playthread.join();
    return 0;
}























































































































































































































































    








































































































































































































































































































































































































































































































































